#!/usr/bin/env ruby
# -*- coding: UTF-8 -*-

lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'gli'

require 'version'
require 'gitgem/action'

include GLI::App

program_desc 'Install gem from git repo'
version GitGem::VERSION

subcommand_option_handling :normal
arguments :strict

desc "Add git repo"
arg_name '-r repo -a alias'
command :add do |c|

  c.desc 'Specify git repo'
  c.arg_name 'ssh@xxx.git'
  c.flag [:r, :repo]

  c.desc 'Specify a short name of git repo'
  c.arg_name 'alias'
  c.flag [:a, :alias]

  c.action do |_, opts, _|
    repo = opts[:r]
    repo_alias = opts[:a]
    GitGem::Action.add(repo_alias, repo)
  end
end

desc "Remove git repo by alias"
arg_name '-a alias'
command :remove do |c|

  c.desc 'Alias of git repo'
  c.arg_name 'alias'
  c.flag [:a, :alias]

  c.action do |_, opts, _|
    repo_alias = opts[:a]
    GitGem::Action.opts(repo_alias)
  end
end

desc "Update gem from git repo"
arg_name '-a alias -g gem -n bindir'
command :update do |c|

  c.desc 'Alias of git repo'
  c.arg_name 'alias'
  c.flag [:a, :alias]

  c.desc 'Name of gem'
  c.arg_name 'gitgem'
  c.flag [:g, :gem]

  c.desc 'dir will install'
  c.arg_name '/usr/local/bin'
  c.flag [:n, :bindir]

  c.action do |_, opts, _|
    repo = opts[:a]
    gem_name = opts[:g]
    bindir = opts[:n]
    GitGem::Action.update(repo, gem_name, bindir)
  end
end

desc "Install gem from git repo"
arg_name '-a alias -g gem -n bindir'
command :install do |c|

  c.desc 'Alias of git repo'
  c.arg_name 'alias'
  c.flag [:a, :alias]

  c.desc 'Name of gem'
  c.arg_name 'gitgem'
  c.flag [:g, :gem]

  c.desc 'dir will install'
  c.arg_name '/usr/local/bin'
  c.flag [:n, :bindir]

  c.action do |_, opts, _|
    repo = opts[:a]
    gem_name = opts[:g]
    bindir = opts[:n]
    GitGem::Action.install(repo, gem_name, bindir)
  end
end

desc "Uninstall gem"
arg_name '-a alias -g gem'
command :uninstall do |c|

  c.desc 'Alias of git repo'
  c.arg_name 'alias'
  c.flag [:a, :alias]

  c.desc 'Name of gem'
  c.arg_name 'gitgem'
  c.flag [:g, :gem]

  c.desc 'dir will uninstall'
  c.arg_name '/usr/local/bin'
  c.flag [:n, :bindir]

  c.action do |_, opts, _|
    repo = opts[:a]
    gem_name = opts[:g]
    bindir = opts[:n]
    GitGem::Action.uninstall(repo, gem_name, bindir)
  end
end

exit run(ARGV)






















# ARGV << '-h' if ARGV.empty?
# action = ARGV.shift unless ARGV.first.start_with?("-")
#
# options = {}
# option_parser = OptionParser.new do |opts|
#   opts.banner = "Here is help messages of the command line tool.\nAction Suppored: 'add', 'remove', 'install', 'uninstall'."
#
#   opts.on('-r REPO', '--repo Repo', 'Specify git repo') do |value|
#     options[:repo] = value
#   end
#
#   opts.on('-a ALIAS', '--alias Alias', 'Make Alias') do |value|
#     options[:alias] = value
#   end
#
#   opts.on('-g GEM', '--gem Gem', 'Install GEM') do |value|
#     argvs = value.split("/")
#     options[:alias] = argvs.shift
#     options[:gem_dir] = argvs.join("/")
#   end
#
#   opts.on('-h', '--help', 'Show this message') { puts opts; exit }
#   opts.on('-v', '--version', 'Show version') { exit }
# end.parse!
#
# case action
# when 'add'
#   repo = options[:repo]
#   repo_alias = options[:alias]
#   GitGem::Action.add(repo_alias, repo)
# when 'remove'
#   repo = options[:alias]
#   GitGem::Action.remove(repo)
# when 'install'
#   repo = options[:alias]
#   gem_dir = options[:gem_dir]
#   GitGem::Action.install(repo, gem_dir)
# when 'uninstall'
#   repo = options[:alias]
#   gem_dir = options[:gem_dir]
#   GitGem::Action.uninstall(repo, gem_dir)
# else
#   abort("Could not find action named '#{action}'")
# end
